Timer unit: 1e-06 s

Total time: 0.014323 s
File: /var/folders/53/q9lwqxpd7lj_hbkx5dv2jy4w0000gn/T/ipykernel_42521/212348515.py
Function: BB84 at line 1

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     1                                           def BB84(numqubits: int, numcheckbits: int, eve: bool = False):
     2                                               """
     3                                               Implements the BB84 protocol using qcrypto.
     4
     5                                               Args:
     6                                                   - numqubits (int): Number of qubits Alice will send to Bob
     7                                                   - numcheckbits (int): Number of bits Alice and Bob will compare through the classical channel
     8                                                   - eve (bool): Whether or not Eve will intrude in Alice and Bob's key exchange
     9
    10                                               Returns:
    11                                                   Whether or not Eve was discovered, as well as Alice's and Bob's keys at the end of the protocol
    12                                               """
    13
    14                                               # Initializations
    15
    16         1        961.0    961.0      6.7      public_qstate = QstateUnEnt(init_method="random", num_qubits=numqubits)
    17
    18         1         54.0     54.0      0.4      Alice = Agent()
    19         1          3.0      3.0      0.0      Alice.set_qstate(qstate=public_qstate, qstate_type="public")
    20         1          4.0      4.0      0.0      Bob = Agent()
    21         1          1.0      1.0      0.0      Bob.set_qstate(qstate=public_qstate, qstate_type="public")
    22         1          0.0      0.0      0.0      if eve:
    23         1         26.0     26.0      0.2          Eve = Agent()
    24         1          0.0      0.0      0.0          Eve.set_qstate(qstate=public_qstate, qstate_type="public")
    25
    26                                               # Protocol
    27
    28         1         90.0     90.0      0.6      Alice_base_choice = np.random.choice([True, False], size=(numqubits))
    29         1         12.0     12.0      0.1      Alice_to_gate = np.nonzero(Alice_base_choice)[0]
    30         1        962.0    962.0      6.7      Alice.apply_gate(qstate_type="public", gate=H_gate, qubit_idx=Alice_to_gate)
    31         1       4778.0   4778.0     33.4      Alice.get_key(qstate_type="public")
    32         1        241.0    241.0      1.7      Alice.apply_gate(qstate_type="public", gate=H_gate, qubit_idx=Alice_to_gate)
    33
    34         1          1.0      1.0      0.0      if eve:
    35         1        105.0    105.0      0.7          Eve_base_choice = np.random.choice([True, False], size=(numqubits))
    36         1         12.0     12.0      0.1          Eve_to_gate = np.nonzero(Eve_base_choice)[0]
    37         1        271.0    271.0      1.9          Eve.apply_gate(qstate_type="public", gate=H_gate, qubit_idx=Eve_to_gate)
    38         1       3215.0   3215.0     22.4          Eve.get_key(qstate_type="public")
    39         1        353.0    353.0      2.5          Eve.apply_gate(qstate_type="public", gate=H_gate, qubit_idx=Eve_to_gate)
    40
    41         1        312.0    312.0      2.2      Bob_base_choice = np.random.choice([True, False], size=(numqubits))
    42         1         36.0     36.0      0.3      Bob_to_gate = np.nonzero(Bob_base_choice)[0]
    43         1        296.0    296.0      2.1      Bob.apply_gate(qstate_type="public", gate=H_gate, qubit_idx=Bob_to_gate)
    44         1       2305.0   2305.0     16.1      Bob.get_key(qstate_type="public")
    45         1        227.0    227.0      1.6      Bob.apply_gate(qstate_type="public", gate=H_gate, qubit_idx=Bob_to_gate)
    46
    47                                               # Throwing away bits with diff bases
    48         1          4.0      4.0      0.0      diff_base_mask = Alice_base_choice == Bob_base_choice
    49
    50         1          6.0      6.0      0.0      Alice.keys["public"] = Alice.keys["public"][diff_base_mask]
    51         1          2.0      2.0      0.0      Bob.keys["public"] = Bob.keys["public"][diff_base_mask]
    52
    53                                               # Alice and Bob communicate check bits
    54         1          3.0      3.0      0.0      Alice_checkbits = Alice.keys["public"][:numcheckbits]
    55         1          1.0      1.0      0.0      Bob_checkbits = Bob.keys["public"][:numcheckbits]
    56
    57         1          2.0      2.0      0.0      Alice.keys["public"] = Alice.keys["public"][numcheckbits:]
    58         1          1.0      1.0      0.0      Bob.keys["public"] = Bob.keys["public"][numcheckbits:]
    59
    60         1         39.0     39.0      0.3      discovered = ~np.all(Alice_checkbits == Bob_checkbits)
    61
    62                                               return discovered, (Alice.keys["public"], Bob.keys["public"])
